
sp {create-object*elaborate*parameter*input-object
   (state <s> ^name create-object
              ^superstate.<< input-object-2 input-object-1 >> <c>
              ^superstate.operator.parameter <c>)
   (<c> ^parameter-index <oc>)
-->
   (<s> ^condition <co>
        ^last-condition <co>)
  
   (<co> ^args <A67> ^attribute input-arg ^name object ^negative false
                 ^parameter <P628> ^rtype single)
   (<P628> ^1 <para>)
   (<para> ^param-id <oc>)
}

sp {create-object*elaborate*parameter
   (state <s> ^name create-object
             -^superstate.input-object-1 <c>
              -^superstate.input-object-2 <c>
              ^superstate.operator.parameter <c>)
-->
   (<s> ^parameter <c>)
}

sp {create-object*elaborate*named-location
   :o-support
   (state <s> ^name create-object
              ^parameter <c>)
   (<c> ^category location ^name <name> -^predicates)
-->
   (<s> ^condition <c2> ^last-condition <c2>)
   (<c2> ^name <name> ^args <ar> ^parameter <pa> ^type attribute ^attribute name ^rtype single)
   (<ar> ^1 <c1>)
   (<c1> ^name location ^parameter <p> ^type attribute ^attribute category ^rtype single)
}

sp {create-object*elaborate*category
   :o-support
   (state <s> ^name create-object
              ^parameter.predicates <c>)
   (<c> ^category {<cat> <> object})
-->
   (<s> ^condition <c1> ^last-condition <c1>)
   (<c1> ^name <cat> ^parameter <p> ^type attribute ^attribute category ^rtype single)
}

sp {create-object*elaborate*property-modifier
   :o-support
   (state <s> ^name create-object
              ^parameter.predicates <p>)
   (<p> ^property-modifier <mod>)
-->
   (<s> ^property-modifier <mod>)
}

sp {create-object*elaborate*previously
   :o-support
   (state <s> ^name create-object
              ^superstate <ss>
              ^property-modifier <mod>)
   (<mod> ^handle previously)
-->
   (<ss> ^modifier previously)
}

sp {create-object*elaborate*number*object*primitive
   :o-support
   (state <s> ^name create-object
              ^parameter <param>)
   (<param> -^predicates ^handle number1)
-->
   (<s> ^condition <c1> ^last-condition <c1>)
   (<c1> ^name number ^args <a2> ^parameter <p> ^rtype single ^return-type number ^result <res>)
   (<res> ^set <rset>)
   (<rset> ^instance <i1> <i2> <i3> <i4> <i5>)
   (<i1> ^1 1)
   (<i2> ^1 2)
   (<i3> ^1 3)
   (<i4> ^1 4)
   (<i5> ^1 5)
}
#(<i4> ^return-type number + ^rtype single + ^args <a2> + ^negative false +
#           ^parameter <p4> + ^result <r2> + ^name number +)
#    (<p4> ^num 1 + ^1 <i5> +)
#    (<i5> ^param-id 3 + ^type single +)
#    (<r2> ^set <s3> +)
#    (<s3> ^instance <i6> +)
#    (<i6> ^1 0 +)

sp {create-object*elaborate*cateogy*object
   :o-support
   (state <s> ^name create-object
              ^parameter.predicates <c>)
   (<c> ^category {<cat> << object >>})
-->
   (<s> ^condition <c1> ^last-condition <c1>)
   (<c1> ^name <cat> ^parameter <p> ^type attribute ^attribute primitive ^rtype single)
}

sp {create-object*propose*unary-predicate
   (state <s> ^name create-object
             -^condition.name <val>
              ^parameter <c>)
   (<c> ^predicates <p>)
   (<p> ^{<att> <> category <> quantified <> property-modifier <> dialog-object <> value <> handle <> type <> visible <> visibility <> multiple <> number} {<val> <> linear})
  -{(<p> ^<att> {<val> << moved >>})
    (<s> ^moved <mov>)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name unary-predicate
        ^attribute <att>
        ^value <val>)
}

sp {create-object*propose*unary-predicate*linear
   (state <s> ^name create-object
             -^condition.name linear
              ^parameter <c>)
   (<c> ^predicates <p>)
   (<p> ^property linear)
-->
   (<s> ^operator <o> + =)
   (<o> ^name unary-predicate
        ^attribute relation
        ^value linear)
}

#JK fix hardcode, test item type visual not property
sp {create-object*elaborate*condition
   (state <s> ^name create-object
              ^operator <o>
              ^last-condition <cond>
              ^parameter <c>)
   (<o> ^name unary-predicate
        ^attribute {<att> << color size shape name spatial-shape >>}
        ^value <val>)
   -{(<s> ^property-modifier <m>)
     (<m> ^handle negation ^modifying.handle <val>)}
-->
   (<s> ^condition <co>)
   (<co> ^name <val> ^parameter <p> ^type attribute ^attribute <att> ^args <a> ^rtype single)
   (<a> ^1 <cond>)
   (<s> ^last-condition <cond> -)
   (<s> ^last-condition <co>)
}

sp {create-object*elaborate*condition*negative
   (state <s> ^name create-object
              ^operator <o>
              ^last-condition <cond>
              ^parameter <c>)
   (<o> ^name unary-predicate
        ^attribute {<att> << color size shape name spatial-shape >>}
        ^value <val>)
   (<s> ^property-modifier <m>)
   (<m> ^handle negation ^modifying.handle <val>)
-->
   (<s> ^condition <co>)
   (<co> ^name <val> ^parameter <p> ^type attribute ^attribute <att> ^args <a> ^rtype single ^negative true)
   (<a> ^1 <cond>)
   (<s> ^last-condition <cond> -)
   (<s> ^last-condition <co>)
}

#all unary relation are over sets
sp {create-object*elaborate*condition*relation
   (state <s> ^name create-object
              ^operator <o>
              ^last-condition <cond>
              ^parameter <c>)
   (<o> ^name unary-predicate
        ^attribute relation
        ^value <val>)
    -{(<s> ^property-modifier <m>)
     (<m> ^handle negation ^modifying.handle <val>)}
-->
   (<s> ^condition <co>)
   (<co> ^name <val> ^parameter <p> ^type state-pair ^attribute preposition ^args <a> ^rtype set)
   (<a> ^1 <cond>)
   (<s> ^last-condition <cond> -)
   (<s> ^last-condition <co>)
}

#all unary relation are over sets
sp {create-object*elaborate*condition*relation*negative
   (state <s> ^name create-object
              ^operator <o>
              ^last-condition <cond>
              ^parameter <c>)
   (<o> ^name unary-predicate
        ^attribute relation
        ^value <val>)
    (<s> ^property-modifier <m>)
    (<m> ^handle negation ^modifying.handle <val>)
-->
   (<s> ^condition <co>)
   (<co> ^name <val> ^parameter <p> ^type state-pair ^attribute preposition ^args <a> ^rtype set ^negative true)
   (<a> ^1 <cond>)
   (<s> ^last-condition <cond> -)
   (<s> ^last-condition <co>)
}

sp {create-object*elaborate*condition*learned-predicate*moved
   (state <s> ^name create-object
              ^operator <o>
              ^last-condition <cond>
              ^parameter <c>)
   (<o> ^name unary-predicate
        ^value moved
        ^attribute property)
   -{(<s> ^property-modifier <m>)
     (<m> ^handle negation ^modifying.handle <val>)}
-->
   (<s> ^condition <co> ^moved <co>)
   (<co> ^name move1 ^args <a> ^parameter <para> ^type concept ^attribute action ^rtype single)
   (<s> ^last-condition <cond> -)
   (<s> ^last-condition <co>)
}

sp {create-object*elaborate*condition*learned-predicate
   (state <s> ^name create-object
              ^operator <o>
              ^last-condition <cond>
              ^parameter <c>)
   (<o> ^name unary-predicate
        -^value moved
        ^attribute property
        ^value <val>)
   -{(<s> ^property-modifier <m>)
     (<m> ^handle negation ^modifying.handle <val>)}
-->
   (<s> ^condition <co>)
   (<co> ^name <val> ^parameter <p> ^type concept ^attribute predicate ^args <a> ^rtype single)#^rtype <rtype>
   (<a> ^1 <cond>)
   (<s> ^last-condition <cond> -)
   (<s> ^last-condition <co>)
}

sp {create-object*elaborate*condition*learned-predicate*negative
   (state <s> ^name create-object
              ^operator <o>
              ^last-condition <cond>
              ^parameter <c>)
   (<o> ^name unary-predicate
        ^attribute property
       -^value moved
        ^value <val>)
   (<s> ^property-modifier <m>)
   (<m> ^handle negation ^modifying.handle <val>)
-->
   (<s> ^condition <co>)
   (<co> ^name <val> ^parameter <p> ^type concept ^attribute predicate ^args <a> ^rtype single ^negative true)
   (<a> ^1 <cond>)
   (<s> ^last-condition <cond> -)
   (<s> ^last-condition <co>)
}

sp {create-object*propose*complete
   (state <s> ^name create-object
              ^last-condition <co>)
-->
   (<s> ^operator <o> + <)
   (<o> ^name complete)
}

sp {create-object*apply*complete*remove-rtype
   (state <s> ^name create-object
              ^operator.name complete
              ^last-condition <cond>
              ^superstate.operator.parameter <c>)
   (<cond> ^rtype <rtype>)
-->
   (<s> ^complete true)
   (<cond> ^rtype <rtype> -)
}

#TODO MAKE SURE DIDNT BREAK ANYTHING
#if number know, it needs parameter
#and make sure no relation, will cause issues
#or if not indef??
sp {create-object*apply*complete*not-indef-parameter*set
   (state <s> ^name create-object
              ^operator.name complete
              ^last-condition <cond>
              ^superstate.operator.parameter <c>)
   (<c> ^predicates.number <> singular -^relation ^parameter-index <id>)
   (<cond> ^parameter <p>)
-->
   (<p> ^1 <para1>)
   (<para1> ^param-id <id> ^type set)
}

sp {create-object*apply*complete*all-parameter*set
   (state <s> ^name create-object
              ^operator.name complete
              ^last-condition <cond>
              ^superstate.operator.parameter <c>)
   (<c> ^predicates.quantified.handle all ^parameter-index <id>)
   (<cond> ^parameter <p>)
-->
   (<p> ^1 <para1>)
   (<para1> ^param-id <id> ^type set)
}

sp {create-object*apply*complete*multiple
   (state <s> ^name create-object
              ^operator.name complete
              ^complete true
              ^last-condition <cond>
              ^superstate.operator.parameter <c>)
   (<c> ^predicates.multiple true)
  -{(<c>  ^relation <r>)
    (<r> -^handle between)}
-->
   (<c> ^formatted <cond>)
   (<cond> ^rtype set)
}

sp {create-object*apply*complete*multiple*with*relation
   (state <s> ^name create-object
              ^operator.name complete
              ^complete true
              ^last-condition <cond>
              ^superstate.operator.parameter <c>)
   (<c> ^predicates.multiple true ^relation <r>)
   (<r> -^handle between)
-->
   (<c> ^formatted <cond> ^rtype set)
   (<cond> ^rtype single)
}

sp {create-object*apply*complete*hasnumber*with*relation
   (state <s> ^name create-object
              ^operator.name complete
              ^complete true
              ^last-condition <cond>
              ^superstate.operator.parameter <c>)
   (<c> -^predicates.multiple true ^predicates.number <> singular ^relation <r>)
   (<r> -^handle between)
-->
   (<c> ^formatted <cond> ^rtype set)
   (<cond> ^rtype single)
}

#default is single
sp {create-object*apply*complete*single
   (state <s> ^name create-object
              ^operator.name complete
              ^complete true
              -^moved
              ^last-condition <cond>
              ^superstate.operator.parameter <c>)
   (<c> -^predicates.multiple true)
   -{(<c> ^predicates.number <> singular ^relation)}
-->
   (<c> ^formatted <cond>)
   (<cond> ^rtype single)
}

sp {create-object*apply*complete*single*moved
   (state <s> ^name create-object
              ^operator.name complete
              ^complete true
              ^moved <mov>
              ^last-condition <cond>
              ^superstate <ss>)
   (<ss> ^operator.parameter <c>)
   (<c> -^predicates.multiple true)
   -{(<c> ^predicates.number <> singular ^relation)}
-->
   (<ss> ^moved <mov>)
   (<c> ^formatted <cond>)
   (<cond> ^rtype single)
}


