##################################################################
#
# create the belief object
#
##################################################################

# Send command to svs 
sp {anystate*apply*attend-to-scene-change*create-belief-object*svs*create_node*tabletop
   (state <s> ^operator <o>
              ^top-state.svs.command <cmd>
              ^agent-params.domain << tabletop fetch >>)
   (<o> ^name attend-to-scene-change
        ^change.type create-belief-object
        ^change.object-info <obj-info>)
   (<obj-info> ^perception-obj.id <perc-id>
              -^belief-obj
               ^belief-id <bel-id>)
-->
   (<cmd> ^copy_node <copy>)
   (<copy> ^id <bel-id>
           ^source <perc-id>
           ^adjust true)
}

# Send command to svs 
sp {anystate*apply*attend-to-scene-change*create-belief-object*svs*create_node*magicbot
   (state <s> ^operator <o>
              ^top-state.svs.command <cmd>
              ^agent-params.domain magicbot)
   (<o> ^name attend-to-scene-change
        ^change.type create-belief-object
        ^change.object-info <obj-info>)
   (<obj-info> ^perception-obj.id <perc-id>
              -^belief-obj
               ^belief-id <bel-id>)
-->
   (<cmd> ^copy_node <copy>)
   (<copy> ^id <bel-id>
           ^source <perc-id>
           ^adjust false)
}

# If debug-perception is on, print a message
sp {anystate*apply*attend-to-scene-change*create-belief-object*debug-perception*print
   (state <s> ^operator <o>
              ^agent-params.debug-perception true)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type create-belief-object
        ^object-info.object-handle <obj-handle>)
-->
   (write |Created belief object for | <obj-handle> (crlf))
}
   
