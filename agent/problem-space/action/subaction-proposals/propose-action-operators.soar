





#sp {composite-action*propose*op_put-down1*with*obj2
#   (state <s> ^problem-space <ps>
#              ^world.objects.object <obj1>
#              ^world.objects.object { <obj2> <> <obj1> })
#   (<ps> ^name action
#         ^action.propose-action-operators true)
#   (<obj1> ^predicates.arm-status grabbed)
#   (<obj2> ^predicates.visible true
#           ^predicates.category object)
#-->
#   (<s> ^operator <op> +)
#   (<op> ^name op_put-down1
#         ^action-handle put-down1
#         ^arg1 <arg1>
#         ^arg2 <arg2>)
#   (<arg1> ^arg-type object
#           ^id <obj1>)
#   (<arg2> ^arg-type predicate
#           ^default-handle on1
#           ^any-predicate true
#           ^2 <obj2>)
#}

### op_give1
#sp {composite-action*propose*op_give1
#   (state <s> ^problem-space <ps>
#              ^world.objects.object <obj1>
#              ^world.objects.object <person>)
#   (<ps> ^name action
#         ^action.propose-action-operators true)
#   (<obj1> ^predicates.arm-status grabbed)
#   (<person> ^predicates.visible true
#             ^predicates.category person)
#-->
#   (<s> ^operator <op> +)
#   (<op> ^name op_give1
#         ^action-handle give1
#         ^arg1 <arg1>
#         ^arg2 <arg2>)
#   (<arg1> ^arg-type object
#           ^id <obj1>)
#   (<arg2> ^arg-type predicate
#           ^handle to1
#           ^2 <person>)
#}
#
### op_find
#sp {composite-action*propose*op_find
#   (state <s> ^problem-space <ps>
#              ^world.objects.object <obj>)
#   (<ps> ^name action
#         ^action.propose-action-operators true)
#   (<obj> ^predicates.visible false)
#-->
#   (<s> ^operator <op> +)
#   (<op> ^name op_find1
#         ^action-handle find1
#         ^arg1 <arg1>)
#   (<arg1> ^arg-type object
#           ^id <obj>)
#}
#





#
## HACK for now, so we can learn store (wont try to pick it up once its on the goal)
#sp {composite-action*reject*op_pick-up1*achieved*goal
#   (state <s> ^problem-space <ps>
#              ^operator <o> +
#              ^desired.predicate <pred>)
#   (<ps> ^name action
#         ^action.propose-action-operators true)
#   (<o> ^name op_pick-up1
#        ^arg1.id <obj1>)
#   (<pred> ^type relation ^1 <obj1>
#           ^satisfied true)
#-->
#   (<s> ^operator <o> -)
#}
#

#
######## propose put-down for objects #########################################
## Mobile - put down on the floor
#sp {composite-action*propose*op_put-down1
#   (state <s> ^problem-space <ps>
#              ^world.objects.object <obj>)
#   (<ps> ^name action
#         ^action.propose-action-operators true)
#   (<obj> ^predicates.arm-status grabbed)
#-->
#   (<s> ^operator <op> +)
#   (<op> ^name op_put-down1
#         ^action-handle put-down1
#         ^arg1 <arg1>)
#   (<arg1> ^arg-type object
#           ^arg-status imagined
#           ^id <obj>)
#}
#
#
########################## propose op_go ##################################
##
#
######################## propose op_scan ##################################
#sp {composite-action*propose*op_scan1
#   (state <s> ^problem-space <ps>
#              ^world.robot <rob>)
#   (<ps> ^name action
#         ^action.propose-action-operators true)
#   (<rob> ^current-location <loc>
#          ^havent-scanned <loc>)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name op_scan1
#        ^action-handle scan1)
#}
#
#
#
######################### propose explore ##################################
##sp {composite-action*propose*op_explore1*each*direction
##   (state <s> ^problem-space <ps>)
##   (<ps> ^name action
##         ^action.propose-action-operators true)
##-->
##   (<s> ^operator <o> +)
##   (<o> ^name op_explore1
##        ^action
#
######################## propose op_orient ##################################
#

#
#
#
############################ propose wait ########################################
###sp {propose*op_wait*operator
###   (state <s> ^problem-space.action <act>)
###   (<act> -^type none)
###-->
###   (<s> ^operator <op> +)
###   (<op> ^name op_wait)
###}
###   
###
