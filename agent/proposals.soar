######################################################
#
# Propose: init-agent
#
######################################################

sp {top-state*propose*init-agent
   (state <s> ^top-state <s>
             -^name rosie)
-->
   (<s> ^operator <o> + > =)
   (<o> ^name init-agent)
}

#######################################################
# 
# Propose: interaction 
#
########################################################

sp {top-state*propose*interaction*status-change
   (state <s> ^top-state <s>
             #-^parser-testing true
              ^interaction.status.<any> <status>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name interaction
        ^type status-change
        ^status-info <status>
        ^status-type <any>)
}

sp {top-state*propose*interaction*interaction-change
   (state <s> ^top-state <s>
             #-^parser-testing true
              ^interaction.changes.<type> <change>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name interaction
        ^type interaction-change
        ^change-info <change>
        ^change-type <type>)
}

#######################################################
# 
# Propose: satisfy-purpose
#
########################################################

sp {top-state*propose*satisfy-purpose
   (state <s> ^top-state <s>
             #-^parser-testing true
		      ^interaction.stack.segment.purpose {<p> <> none})
   (<p> -^type << action-command execute-action goal-description >>
	-^category goal)
-->
   (<s> ^operator <o> +)
   (<o> ^name satisfy-purpose
        ^purpose <p>)
}

sp {top-state*propose*execute-action
   (state <s> ^superstate nil
              ^interaction.stack.segment.purpose.type << game execute-action >>
              ^action-stack.bottom { <action> <> none })
-->
   (<s> ^operator <o> +)
   (<o> ^name execute-action
        ^action <action>)
}

sp {top-state*apply*execute-action
   (state <s> ^superstate nil
              ^operator.name execute-action
              ^agent-params.enable-interrupts true)
-->
   (interrupt)
}

sp {top-state*propose*generate-action-operator
   (state <s> ^superstate nil
              ^interaction.stack.segment.purpose <p>)
   (<p> ^type execute-action
        ^parameters <params>)
   (<params> ^command-message <msg>
            -^action-operator <op>)
   (<msg> -^pushed)
-->
   (<s> ^operator <o> +)
   (<o> ^name generate-action-operator
        ^command-message <msg>)
}

sp {top-state*propose*manage-action-stack
   (state <s> ^superstate nil
              ^action-stack.changes.<change-name> <any>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name manage-action-stack
        ^change-name <change-name>
        ^change-info <any>)
}

#sp {top-state*propose*learning*action-type
#   (state <s> ^top-state <s>
#				^interaction.stack.segment.purpose <p>)
#   (<p> ^satisfaction.learning-event)
#   (<p> ^type << action-command >>)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name action-learning
#        ^purpose <p>)
#}
#
#sp {top-state*propose*learning*goal
#   (state <s> ^top-state <s>
#			 ^interaction.stack.segment.purpose <p>)
#   (<p> ^satisfaction.learning-event)
#   (<p> ^category goal)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name action-learning
#        ^purpose <p>)
#}
#
#sp {top-state*propose*lookup-preposition
#   (state <s> ^prepositions.prep.name <name>
#              ^superstate nil
#              ^top-state.robot-state.arm.action wait
#             -^found-prep.type <name>)
#-->
#   (<s> ^operator <o> + =)
#   (<o> ^name lookup-preposition
#        ^type <name>)
#}
#
